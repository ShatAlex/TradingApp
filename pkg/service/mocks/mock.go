// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	trade "github.com/ShatAlex/trading-app"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user trade.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockTrade is a mock of Trade interface.
type MockTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTradeMockRecorder
}

// MockTradeMockRecorder is the mock recorder for MockTrade.
type MockTradeMockRecorder struct {
	mock *MockTrade
}

// NewMockTrade creates a new mock instance.
func NewMockTrade(ctrl *gomock.Controller) *MockTrade {
	mock := &MockTrade{ctrl: ctrl}
	mock.recorder = &MockTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrade) EXPECT() *MockTradeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTrade) Create(userId int, trade trade.Trade) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, trade)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTradeMockRecorder) Create(userId, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTrade)(nil).Create), userId, trade)
}

// Delete mocks base method.
func (m *MockTrade) Delete(userId, tradeId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, tradeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTradeMockRecorder) Delete(userId, tradeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTrade)(nil).Delete), userId, tradeId)
}

// GetAll mocks base method.
func (m *MockTrade) GetAll(userId int) ([]trade.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]trade.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTradeMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTrade)(nil).GetAll), userId)
}

// GetTradeById mocks base method.
func (m *MockTrade) GetTradeById(userId, tradeId int) (trade.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeById", userId, tradeId)
	ret0, _ := ret[0].(trade.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeById indicates an expected call of GetTradeById.
func (mr *MockTradeMockRecorder) GetTradeById(userId, tradeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeById", reflect.TypeOf((*MockTrade)(nil).GetTradeById), userId, tradeId)
}

// Update mocks base method.
func (m *MockTrade) Update(userId, tradeId int, trade trade.UpdateTradeInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, tradeId, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTradeMockRecorder) Update(userId, tradeId, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTrade)(nil).Update), userId, tradeId, trade)
}

// MockTypeTrade is a mock of TypeTrade interface.
type MockTypeTrade struct {
	ctrl     *gomock.Controller
	recorder *MockTypeTradeMockRecorder
}

// MockTypeTradeMockRecorder is the mock recorder for MockTypeTrade.
type MockTypeTradeMockRecorder struct {
	mock *MockTypeTrade
}

// NewMockTypeTrade creates a new mock instance.
func NewMockTypeTrade(ctrl *gomock.Controller) *MockTypeTrade {
	mock := &MockTypeTrade{ctrl: ctrl}
	mock.recorder = &MockTypeTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeTrade) EXPECT() *MockTypeTradeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTypeTrade) Create(userId int, typeTrade trade.TypeTrade) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, typeTrade)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTypeTradeMockRecorder) Create(userId, typeTrade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTypeTrade)(nil).Create), userId, typeTrade)
}

// Delete mocks base method.
func (m *MockTypeTrade) Delete(userId, typeId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, typeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTypeTradeMockRecorder) Delete(userId, typeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTypeTrade)(nil).Delete), userId, typeId)
}

// GetAll mocks base method.
func (m *MockTypeTrade) GetAll() ([]trade.TypeTrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]trade.TypeTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTypeTradeMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTypeTrade)(nil).GetAll))
}

// GetTypeById mocks base method.
func (m *MockTypeTrade) GetTypeById(typeId int) (trade.TypeTrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeById", typeId)
	ret0, _ := ret[0].(trade.TypeTrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeById indicates an expected call of GetTypeById.
func (mr *MockTypeTradeMockRecorder) GetTypeById(typeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeById", reflect.TypeOf((*MockTypeTrade)(nil).GetTypeById), typeId)
}

// SuperUserValidate mocks base method.
func (m *MockTypeTrade) SuperUserValidate(userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuperUserValidate", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuperUserValidate indicates an expected call of SuperUserValidate.
func (mr *MockTypeTradeMockRecorder) SuperUserValidate(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuperUserValidate", reflect.TypeOf((*MockTypeTrade)(nil).SuperUserValidate), userId)
}

// Update mocks base method.
func (m *MockTypeTrade) Update(userId, typeId int, typeTrade trade.TypeTrade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, typeId, typeTrade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTypeTradeMockRecorder) Update(userId, typeId, typeTrade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTypeTrade)(nil).Update), userId, typeId, typeTrade)
}

// MockPortfolio is a mock of Portfolio interface.
type MockPortfolio struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioMockRecorder
}

// MockPortfolioMockRecorder is the mock recorder for MockPortfolio.
type MockPortfolioMockRecorder struct {
	mock *MockPortfolio
}

// NewMockPortfolio creates a new mock instance.
func NewMockPortfolio(ctrl *gomock.Controller) *MockPortfolio {
	mock := &MockPortfolio{ctrl: ctrl}
	mock.recorder = &MockPortfolioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolio) EXPECT() *MockPortfolioMockRecorder {
	return m.recorder
}

// BuyTicker mocks base method.
func (m *MockPortfolio) BuyTicker(userId int, input trade.BuySellTickerInput, price float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyTicker", userId, input, price)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyTicker indicates an expected call of BuyTicker.
func (mr *MockPortfolioMockRecorder) BuyTicker(userId, input, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyTicker", reflect.TypeOf((*MockPortfolio)(nil).BuyTicker), userId, input, price)
}

// GetAllTickers mocks base method.
func (m *MockPortfolio) GetAllTickers(userId int) ([]trade.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickers", userId)
	ret0, _ := ret[0].([]trade.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickers indicates an expected call of GetAllTickers.
func (mr *MockPortfolioMockRecorder) GetAllTickers(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickers", reflect.TypeOf((*MockPortfolio)(nil).GetAllTickers), userId)
}

// GetTickerByNasdaq mocks base method.
func (m *MockPortfolio) GetTickerByNasdaq(userId int, nasdaq string) (trade.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerByNasdaq", userId, nasdaq)
	ret0, _ := ret[0].(trade.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickerByNasdaq indicates an expected call of GetTickerByNasdaq.
func (mr *MockPortfolioMockRecorder) GetTickerByNasdaq(userId, nasdaq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerByNasdaq", reflect.TypeOf((*MockPortfolio)(nil).GetTickerByNasdaq), userId, nasdaq)
}

// SellTicker mocks base method.
func (m *MockPortfolio) SellTicker(userId int, input trade.BuySellTickerInput, price float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellTicker", userId, input, price)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellTicker indicates an expected call of SellTicker.
func (mr *MockPortfolioMockRecorder) SellTicker(userId, input, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellTicker", reflect.TypeOf((*MockPortfolio)(nil).SellTicker), userId, input, price)
}
